#!/usr/bin/env ruby

class IdGenerator
  def initialize
    @new_features = {"-1" => -1, "1" => 1, "+1" => 1, "0" => 0}
    @new_features_cnt = 1
  end
  
  def get_id(feature)
    if @new_features.has_key?(feature) then
      @new_features [feature]
    else
      @new_features_cnt += 1
      @new_features [feature] = @new_features_cnt
    end
  end

  attr_reader :new_features, :new_features_cnt
end

class_gen = IdGenerator.new
feature_gen = IdGenerator.new

#class_gen.get_id("1")
#class_gen.get_id("-1")

while line = gets do
  tokens = line.chop.split(/ /)
  ids = []
  print "#{class_gen.get_id(tokens[0].to_i.to_s)} "

  tokens.shift

  (0...tokens.size).each do |i|
    tokens[i] = tokens[i].split(":")

    tokens[i][0] = feature_gen.get_id(tokens[i][0])

    if tokens[i].size == 1
      tokens[i] << 1.0
    else
      tokens[i][1] = tokens[i][1].to_f
    end
  end
  tokens = tokens.sort_by { |v| v[0]}.collect {|v| v[0].to_s + ":" + v[1].to_s}

#  puts tokens.inspect
#  (1...tokens.size).each do |i|
#    ids << feature_gen.get_id(tokens[i])
#  end
  puts tokens.join(" ")
end

File.open("token2id.txt", "w") do |file|
  feature_gen.new_features.each do |key, value|
    file.puts (key.to_s + " " + value.to_s)
  end
end

File.open("class2id.txt", "w") do |file|
  class_gen.new_features.each do |key, value|
    file.puts (key.to_s + " " + value.to_s)
  end
end
