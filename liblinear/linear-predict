#!/bin/sh

# Copyright (c) 2016-2018 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

: ${LIBLINEAR_PREDICT:=liblinear-predict}
: ${GZIP_CMD:=gzip}
: ${TMPDIR:=/tmp}

while getopts b:qZ f; do
    case "$f" in
	'?')
	    ${LIBLINEAR_PREDICT}
	    exit 1;;
	b)
	    with_probs=1
	    opts="$opts -b $OPTARG";;
	q)
	    opts="$opts -q";;
	-Z)
	    compressed=1;;
    esac
done
shift `expr $OPTIND - 1`

postprocess (){
    # convert liblinear-predict's format to what we really need
    awk '
	NR == 1 {
	    if ($1 != "labels")
		exit 1
	    for (i=2; i <= NF; ++i){
		idx2label[i-1] = $i
		label2idx[$i] = i-1
	    }
	    next
	}
	{
	    skip_label = $1
	    $1 = ($1 " " $(1+label2idx[$1]))
	    for (label in label2idx){
		idx = label2idx[label]
		if (skip_label == label){
		    $(idx+1) = ""
		}else{
		    $(idx+1) = label " " $(idx+1)
		}
	    }
	    gsub(/  +/, " ")
	    print $0
	}
	' "$@"
}

get_3rd_arg (){
    shift
    shift
    printf '%s\n' "$1"
}

sig_handler (){
    on_exit
    trap - "$1"
    kill -"$1" $$
}

on_exit(){
    rm -rf "$tmp_dir"
}

trap "sig_handler INT"  INT
trap "on_exit" 0

tmp_dir=`mktemp -d "$TMPDIR"/linear-predict.XXXXXX`
fifo_fn="$tmp_dir"/1.pipe
fifo2_fn="$tmp_dir"/2.pipe

output_fn=`get_3rd_arg "$@"`
input_fn="$1"

mkfifo "$fifo_fn"
mkfifo "$fifo2_fn"

if test -n "compressed"; then
    $GZIP_CMD -dc "$input_fn".gz > "$fifo2_fn" &
    input_fn="$fifo2_fn"
fi

if test -n "$with_probs"; then
    postprocess < "$fifo_fn" > "$output_fn" &
    $LIBLINEAR_PREDICT $opts "$input_fn" "$2" "$fifo_fn"
else
    $LIBLINEAR_PREDICT $opts "$input_fn" "$2" "$3"
fi
