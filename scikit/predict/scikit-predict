#!/usr/bin/env python3

# Copyright (c) 2016-2019 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import getopt
import numpy
import pickle
import sys
from os.path import basename
from svmlight_loader import load_svmlight_file

def usage():
    sys.stderr.write('''%s predicts class labels using model built by scikit_*-train
usage: scikit-predict [OPTIONS] <testing_set_file> <model_file> <output_file>
OPTIONS:

   -h   --help                     Display this screen.

    ''' %basename(sys.argv[0]))

opts,args = getopt.getopt(sys.argv[1:], 'h', ['help'])
for o,a in opts:
    if o in ("-h", "--help", ):
        usage()
        sys.exit()

with open(args[1], 'rb') as f:
    clf = pickle.load(f)
    n_features = pickle.load(f)

    X_test, y_test = load_svmlight_file(args[0], n_features)

labels_count = clf.classes_.size

with open(args[2], 'w') as output:
    for i in range(0, X_test.shape[0]):
        try:
            results = clf.predict_proba(X_test[i])[0]
        except AttributeError:
            results = clf.decision_function(X_test[i])[0]
            if isinstance(results, float):
                results = (-results, results)

        max_index = numpy.argmax(results)
        output.write("%d %f" % (clf.classes_[max_index], results[max_index]))
        for j in range(0, labels_count):
            if j != max_index:
                output.write(" %d %f" % (clf.classes_[j], results[j]))
        output.write('\n')
