#!/usr/bin/env python

# Copyright (c) 2016 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import pickle
import numpy
import sys
import os
from scipy.sparse import csr_matrix, coo_matrix, hstack
#from svmlight_loader import load_svmlight_file
from sklearn import ensemble
from sklearn.datasets import load_svmlight_file

def resize_csr_matrix(matrix, fc):
    new_feature_count = fc

    n_objects = matrix.shape[0]
    n_features = matrix.shape[1]

    matrix = coo_matrix(matrix)
    n_items = matrix.row.shape[0]

    matrix.row.resize(n_items + n_objects)
    matrix.col.resize(n_items + n_objects)
    matrix.data.resize(n_items + n_objects)

    for i in range(n_objects):
        matrix.row.put(n_items + i, i)
        matrix.col.put(n_items + i, new_feature_count-1)
        matrix.data.put(n_items + i, 1.0)

    return csr_matrix(coo_matrix((matrix.data, (matrix.row, matrix.col)), shape=(n_objects, new_feature_count)))

with open(sys.argv [2], 'rb') as f:
    clf = pickle.load(f)
    X_test, y_test = load_svmlight_file(sys.argv [1])

if 'HERISVM_FC' in os.environ:
    fc=int(os.environ['HERISVM_FC'])
    X_test = resize_csr_matrix(X_test, fc)

result = clf.predict_proba(X_test)
labels_count = result.shape[1]

with open(sys.argv [3], 'w') as output:
    for i in range(0, result.shape[0]):
        max_index = numpy.argmax(result[i])
        output.write("%d %f" % (clf.classes_[max_index], result[i][max_index]))
        for j in range(0, result.shape[1]):
            if j != max_index:
                output.write(" %d %f" % (clf.classes_[j], result[i][j]))
        output.write('\n')
