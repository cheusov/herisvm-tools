#!/usr/bin/env python

import pickle
import numpy
import sys
import os
import getopt
from scipy.sparse import csr_matrix, coo_matrix, hstack
#from svmlight_loader import load_svmlight_file
from sklearn import ensemble
from sklearn.datasets import load_svmlight_file

def resize_csr_matrix(matrix, fc):
    new_feature_count = fc

    n_objects = matrix.shape[0]
    n_features = matrix.shape[1]

    matrix = coo_matrix(matrix)
    n_items = matrix.row.shape[0]

    matrix.row.resize(n_items + n_objects)
    matrix.col.resize(n_items + n_objects)
    matrix.data.resize(n_items + n_objects)

    for i in range(n_objects):
        matrix.row.put(n_items + i, i)
        matrix.col.put(n_items + i, new_feature_count-1)
        matrix.data.put(n_items + i, 1.0)

    return csr_matrix(coo_matrix((matrix.data, (matrix.row, matrix.col)), shape=(n_objects, new_feature_count)))

def usage():
    print '''scikit-train builds the model using sklearn.ensemble.RandomForestClassifier
usage: scikit_rf-train [OPTIONS] <dataset> <model>
OPTIONS:
   -h   --help                     display this screen
        --estimators <num>         the number of estimator (default: 10)
        --random_seed <seed>       random seed (default: None)
'''

# defaults
estimators = 10
random_seed = None

#
opts,args = getopt.getopt(sys.argv[1:], 'h',
                          ['help', 'estimators=', 'random_seed=']
)

for o,a in opts:
    if o in ("-h", "--help", ):
        usage()
        sys.exit()
    if o in ("--estimators", ):
        estimators = int(a)
    if o in ("--random_seed", ):
        random_seed = int(a)

X_train, y_train = load_svmlight_file(args[0])

if 'HERISVM_FC' in os.environ:
    fc=int(os.environ['HERISVM_FC'])
    X_train = resize_csr_matrix(X_train, fc)

clf = ensemble.RandomForestClassifier(
    n_estimators=estimators, max_features=None, max_depth=18,
    random_state=random_seed)
clf.fit(X_train, y_train)
with open(args[1], 'wb') as f:
    pickle.dump(clf, f)
